// Especificação do parser CUP
package parser;
import java_cup.runtime.*;
import java.util.HashMap;
import ast.expr.*;
import ast.Interpreter;
import ast.command.*;
import ast.*;

// Definição dos terminais
terminal            SEMI, PLUS, MINUS, TIMES, DIVIDE, MOD, PRINT;
terminal            UMINUS, LPAREN, RPAREN, LBRACE, RBRACE, ASSIGN, SIN, COS, EXP;
terminal            GT, GTE, LT, LTE, EQ, NEQ, IF, ELSE, WHILE;
terminal Double     NUMBER;
terminal String     ID, STRING;
terminal Double     PI;

// Definição dos não-terminais
non terminal            program;
non terminal Expr       expr;
non terminal BoolExpr   bool_expr;
non terminal Command    command, command_part;
non terminal CommandList command_list, command_block;
non terminal PrintCommand       print_command;
non terminal AssignmentCommand  assignment_command;
non terminal IfCommand          if_command;
non terminal WhileCommand       while_command;

// Precedência e associatividade dos operadores
precedence nonassoc ELSE;
precedence nonassoc IF;
precedence nonassoc ASSIGN;
precedence left GT;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence right EXP;
precedence left UMINUS;

// Regras da gramática
program ::= command_list:cl
        {: cl.accept(new Interpreter()); :}
    ;

command_list ::= command_part:p command_list:cl
        {: RESULT = new CommandList(p, cl); :}
    | command_part:p
        {: RESULT = new CommandList(p); :}
    ;

command_part ::= command:c
        {: RESULT = c; :}
    ;

command ::= assignment_command:a SEMI
        {: RESULT = a; :}
    | print_command:p SEMI
        {: RESULT = p; :}
    | if_command:ifc
        {: RESULT = ifc; :}
    | while_command:w
        {: RESULT = w; :}
    | command_block:cb
        {: RESULT = cb; :}
    ;

command_block ::= LBRACE command_list:cl RBRACE
        {: RESULT = cl; :}
    ;

while_command ::= WHILE LPAREN bool_expr:e RPAREN command:c
        {: RESULT = new WhileCommand(e, c); :}
    ;

assignment_command ::= ID:id ASSIGN expr:e
        {: RESULT = new AssignmentCommand(id, e); :}
    ;

print_command ::= PRINT LPAREN expr:e RPAREN
        {: RESULT = new PrintCommand(e); :}
    ;

if_command ::= IF LPAREN bool_expr:e RPAREN command:c
        {: RESULT = new IfCommand(e, c); :}
    | IF LPAREN bool_expr:e RPAREN command:c1 ELSE command:c2
        {: RESULT = new IfCommand(e, c1, c2); :}
    ;

expr ::= expr:e1 PLUS expr:e2
        {: RESULT = new SumExpr(e1, e2); :}
    | expr:e1 MINUS expr:e2
        {: RESULT = new SubExpr(e1, e2); :}
    | expr:e1 TIMES expr:e2
        {: RESULT = new MulExpr(e1, e2);; :}
    | expr:e1 DIVIDE expr:e2
        {: RESULT = new DivExpr(e1, e2); :}
    | expr:e1 MOD expr:e2
        {: RESULT = new ModExpr(e1, e2); :}
    | expr:e1 EXP expr:e2
        {: RESULT = new ExpExpr(e1, e2); :}
    | MINUS expr:e 
        {: RESULT = new NegatedExpr(e); :} %prec UMINUS
    | LPAREN expr:e RPAREN 
        {: RESULT = e; :}
    | NUMBER:n 
        {: RESULT = new ConstExpr(new Const(n, Type.NUMBER)); :}
    | STRING:s 
        {: RESULT = new ConstExpr(new Const(s, Type.STRING)); :}
    | ID:id 
        {: RESULT = new IdExpr(id); :}
    | SIN LPAREN expr:e RPAREN 
        {: RESULT = new SinExpr(e); :}
    | COS LPAREN expr:e RPAREN
        {: RESULT = new CosExpr(e); :}
    | PI:pi 
        {: RESULT = new PiExpr(pi); :}
    ;

bool_expr ::= expr:e1 GT expr:e2
        {: RESULT = new GTExpr(e1, e2); :}
    | expr:e1 GTE expr:e2
        {: RESULT = new GTEExpr(e1, e2); :}
    | expr:e1 LT expr:e2
        {: RESULT = new LTExpr(e1, e2); :}
    | expr:e1 LTE expr:e2
        {: RESULT = new LTEExpr(e1, e2); :}
    | expr:e1 EQ expr:e2
        {: RESULT = new EQExpr(e1, e2); :}
    | expr:e1 NEQ expr:e2
        {: RESULT = new NEQExpr(e1, e2); :}
    ;
